version: '3.8'

services:
  carservice-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: carservice-api
    restart: unless-stopped
    ports:
      - "7290:7290"
      - "5013:5013"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnectionString=Host=postgres-db;Port=5432;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${POSTGRES_DB};
      - ConnectionStrings__RedisConnectionString=redis:6379,user=${REDIS_USER},password=${REDIS_PASSWORD},abortConnect=false
      - Redis__Host=redis
      - Redis__Port=6379
      - Redis__Password=${REDIS_PASSWORD}
      - RedisConfig__Host=${REDIS_HOST}
      - RedisConfig__Password=${REDIS_PASSWORD}
      - Elastic__Url=${ELASTIC_URL}
      - RabbitMq__Host=${RABBIT_HOST}
      - RabbitMq__Username=${RABBIT_USER}
      - RabbitMq__Password=${RABBIT_PASSWORD}
      - MailConfig__MailPassword=${MAIL_PASSWORD}
      - MailConfig__MailSender=${MAIL_SENDER}
      - MailConfig__MailUsername=${MAIL_USERNAME}
      - ElasticConfig__Url=${ELASTIC_URL}
      - ElasticConfig__UserName=${ELASTIC_USER}
      - ElasticConfig__Password=${ELASTIC_PASSWORD}
      - ElasticConfig__JaegerHost=${JEAGER_HOST}
      - ElasticConfig__ResourceName=${RESOURCE_NAME}
      - TokenOptions__SecurityKey=${TOKEN_SECURITY_KEY}
      - MobileTokenOptions__SecurityKey=${MOBILE_TOKEN_SECURITY_KEY}
    networks:
      - backend
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - rabbitmq
    command: ["/wait-for-it.sh", "postgres-db:5432", "--", "dotnet", "Adoroid.CarService.API.dll"]

  postgres:
    image: postgres:16
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: redis:7
    container_name: redis
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - backend

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ELASTIC_USERNAME=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - backend

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
    ports:
      - "5672:5672"     # AMQP
      - "15672:15672"   # Management UI
    networks:
      - backend

volumes:
  postgres_data:
  es_data:

networks:
  backend:
    driver: bridge
